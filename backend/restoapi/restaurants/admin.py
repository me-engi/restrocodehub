# backend/restaurants/admin.py
from django.contrib import admin
from .models import Restaurant, OperatingHoursRule, SpecialDayOverride

class OperatingHoursRuleInline(admin.TabularInline):
    model = OperatingHoursRule
    extra = 1 # Number of empty forms to display
    fields = ('day_of_week', 'open_time', 'close_time', 'is_closed_on_this_day_override')
    ordering = ('day_of_week', 'open_time')

class SpecialDayOverrideInline(admin.TabularInline):
    model = SpecialDayOverride
    extra = 1
    fields = ('date', 'is_closed_all_day', 'open_time', 'close_time', 'reason')
    ordering = ('date',)

@admin.register(Restaurant)
class RestaurantAdmin(admin.ModelAdmin):
    list_display = ('name', 'tenant_name_display', 'city', 'is_operational', 'slug', 'created_at')
    list_filter = ('is_operational', 'tenant', 'city', 'country', 'created_at')
    search_fields = ('name', 'slug', 'tenant__name', 'city', 'address_line1')
    readonly_fields = ('id', 'slug', 'created_at', 'updated_at')
    prepopulated_fields = {} # Slug is auto-generated by model's save method
    fieldsets = (
        (None, {
            'fields': ('id', 'tenant', 'name', 'slug', 'description', 'is_operational')
        }),
        ('Contact Information', {
            'fields': ('phone_number', 'public_email', 'website_url')
        }),
        ('Address', {
            'fields': ('address_line1', 'address_line2', 'city', 'state_province', 'postal_code', 'country')
        }),
        ('Geolocation & Branding', {
            'fields': ('latitude', 'longitude', 'logo_image', 'banner_image')
        }),
        ('Timestamps', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',)
        }),
    )
    inlines = [OperatingHoursRuleInline, SpecialDayOverrideInline]
    list_select_related = ('tenant',) # Optimize query for tenant name

    def tenant_name_display(self, obj):
        return obj.tenant.name
    tenant_name_display.short_description = 'Tenant'
    tenant_name_display.admin_order_field = 'tenant__name'


@admin.register(OperatingHoursRule)
class OperatingHoursRuleAdmin(admin.ModelAdmin):
    list_display = ('restaurant_name_display', 'day_of_week_display', 'open_time', 'close_time', 'is_closed_on_this_day_override')
    list_filter = ('restaurant', 'day_of_week', 'is_closed_on_this_day_override')
    search_fields = ('restaurant__name',)
    list_select_related = ('restaurant',)

    def restaurant_name_display(self, obj):
        return obj.restaurant.name
    restaurant_name_display.short_description = 'Restaurant'

    def day_of_week_display(self, obj):
        return obj.get_day_of_week_display()
    day_of_week_display.short_description = 'Day of Week'


@admin.register(SpecialDayOverride)
class SpecialDayOverrideAdmin(admin.ModelAdmin):
    list_display = ('restaurant_name_display', 'date', 'status_display', 'reason_preview')
    list_filter = ('restaurant', 'date', 'is_closed_all_day')
    search_fields = ('restaurant__name', 'reason')
    date_hierarchy = 'date'
    list_select_related = ('restaurant',)

    def restaurant_name_display(self, obj):
        return obj.restaurant.name
    restaurant_name_display.short_description = 'Restaurant'

    def status_display(self, obj):
        if obj.is_closed_all_day:
            return "Closed All Day"
        elif obj.open_time and obj.close_time:
            return f"{obj.open_time.strftime('%I:%M %p')} - {obj.close_time.strftime('%I:%M %p')}"
        return "Special Hours (Undefined)"
    status_display.short_description = 'Operating Status'

    def reason_preview(self, obj):
        return (obj.reason[:50] + '...') if obj.reason and len(obj.reason) > 50 else obj.reason
    reason_preview.short_description = 'Reason'